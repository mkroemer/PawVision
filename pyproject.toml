[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pawvision"
version = "2.0.0"
description = "Raspberry Pi-based Pet TV system with web interface and smart controls"
readme = "README.md"
license = {text = "AGPL-3.0"}
authors = [
    {name = "Markus Kroemer", email = "mkroemer@users.noreply.github.com"}
]
keywords = ["raspberry-pi", "pet", "entertainment", "automation", "gpio"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation",
    "Topic :: Multimedia :: Video :: Display",
]
requires-python = ">=3.8"
dependencies = [
    "Flask>=3.0.0",
    "gpiozero>=2.0.0",
    "Werkzeug>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "flake8>=6.0.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]

[project.urls]
Homepage = "https://github.com/mkroemer/PawVision"
Documentation = "https://mkroemer.github.io/PawVision/"
Repository = "https://github.com/mkroemer/PawVision.git"
Issues = "https://github.com/mkroemer/PawVision/issues"

[project.scripts]
pawvision = "pawvision.main:main"

[tool.setuptools.packages.find]
include = ["pawvision*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
pawvision = ["*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pawvision"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true

[tool.coverage.run]
source = ["pawvision"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", "virtualenv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for dev environments
